---
start_the_leaf:
  description: Used to start the climate on the leaf through google home
  sequence:
    - service: switch.turn_on
      entity_id: switch.eve2gmmug_climate_control

charge_the_leaf:
  variables:
    not_plugged_message: >-
      "La Leaf ne peut pas charger car elle n'est pas branchée."
  sequence:
    # The implementation of the nissan's api is so unreliable
    # that we do it twice just for luck....
    - repeat:
        count: 2
        sequence:
          - service: nissan_leaf.start_charge
            # data:
              # vin: !secret nissan_vin
          - delay: "00:00:30"
    - condition: state
      entity_id: alarm_control_panel.home_alarm
      state: 'disarmed'
    - service: script.update_leaf
    - condition: state
      entity_id: binary_sensor.eve2gmmug_plug_status
      state: "off"
    - service: notify.all_people
      data:
        message: "{{ not_plugged_message }}"
    - service: tts.google_translate_say
      entity_id: media_player.kitchen
      data:
        message: "{{ not_plugged_message }}"
        language: 'fr'

turn_off_leaf_climate:
  sequence:
    - condition: state
      entity_id: switch.eve2gmmug_climate_control
      state: "on"
    # This seems to always return an error...
    - service: switch.turn_off
      entity_id: switch.eve2gmmug_climate_control
    - service: notify.all_people
      data:
        message: >-
          Il semble que le départ prévu de la Leaf n'a pas eu lieu.
          Il est important d'arrêter le contrôle du climat manuellement.

update_leaf:
  description: >-
    Fetch the leaf's current state.
    The api may return as succeeded, but with old values
    Or it may return as error.. and it can take up to 5 minutes to return...
    That is why we try it 4 times.
    Calling it directly with "service: script.update_leaf"
    will ensure the calling script will wait for the update.
  mode: queued
  sequence:
    - condition: or
      conditions:
        - "{{ state_attr('sensor.eve2gmmug_charge', 'updated_on') == None }}"
        - >-
          {{ state_attr('sensor.eve2gmmug_charge', 'updated_on')
             == null }}
        - >-
          {{  as_timestamp(now()) -
              as_timestamp(state_attr('sensor.eve2gmmug_charge', 'updated_on'))
              > 600 }}
    - repeat:
        count: 3
        sequence:
          - service: nissan_leaf.update
            # data:
              # vin: !secret nissan_vin
          - delay: "00:00:10"
          - wait_for_trigger:
              - platform: state
                entity_id: sensor.eve2gmmug_charge
                attribute: update_in_progress
                to: false
            timeout: 600
          - delay: "00:00:10"
    # it can take some time before the stats gets updated.
    - delay: "00:01:00"

auto_switch_on:
  mode: parallel
  sequence:
    - service: switch.turn_on
      data:
        entity_id: "{{ auto_switch_entity }}"
    - service: script.turn_on
      data:
        entity_id: script.auto_switch_off
        variables:
          auto_switch_entity: "{{ auto_switch_entity }}"
          duration_seconds: "{{ duration_seconds }}"

auto_switch_off:
  mode: parallel
  sequence:
    - delay:
        seconds: "{{ duration_seconds }}"
    - condition: template
      value_template: >-
        {{ as_timestamp(now())
           -
           as_timestamp(states[auto_switch_entity].last_changed)
           >=
           duration_seconds|int - 10 }}
    - service: switch.turn_off
      data:
        entity_id: "{{ auto_switch_entity }}"

fred_vit_d_drop:
  sequence:
    - condition: state
      entity_id: input_boolean.fred_had_drop
      state: "off"
    - service: input_boolean.turn_on
      entity_id: input_boolean.fred_had_drop
    - service: notify.all_people
      data:
        message: "Fred a pris sa goutte."

yan_pills:
  sequence:
    - condition: state
      entity_id: input_boolean.yan_had_pills
      state: "off"
    - service: input_boolean.turn_on
      entity_id: input_boolean.yan_had_pills
    - service: notify.yan
      data:
        message: "Yan a pris ses pillules."

phone_notification:
  mode: parallel
  sequence:
    - condition: template
      value_template: '{{ is_state("person." + owner, "home") }}'
    - service_template: >-
        input_boolean.
        {%- if type == "notification" -%}
          toggle
        {%- elif type == "rings" -%}
          turn_on
        {%- else -%}
          turn_off
        {%- endif -%}
      data:
        entity_id: input_boolean.{{ owner }}_phone_{{ type or "rings"}}

lights_off_except:
  fields:
    exclude_lights:
      description: 'Excluded lights as list'
  sequence:
    - service: light.turn_off
      data:
        entity_id: >-
          {% for device in
                 states.light |
                 rejectattr('entity_id','in', exclude_lights ) |
                 rejectattr('state','in','unavailable') %}
             {%- if not loop.first %}, {% endif -%}
               {{ device.entity_id }}
          {%- endfor %}

notify_and_speak:
  fields:
    message:
      description: 'The content of the text and voice notification'
      example: 'Hello everyone!'
  mode: queued
  sequence:
    - service: notify.all_people
      data:
        message: "{{ message }}"
    - service: tts.google_translate_say
      entity_id: media_player.kitchen
      data:
        message: "{{ message }}"
        language: 'fr'

set_tesla_climate:
  fields:
    state:
      description: 'The target state for the tesla climate'
      example: 'on'
  mode: restart
  sequence:
    - service: switch.turn_on
      entity_id: switch.bibicar_update_switch
    - repeat:
        count: 2
        sequence:
          - delay: "00:00:15"
          - service: "{{ 'climate.turn_'+state }}"
            entity_id: climate.bibicar_hvac_climate_system
          - condition: and
            conditions:
              - "{{ state == 'on'}}"
              - >
                {{(state_attr('weather.main_floor', 'temperature')|float) < 2}}
          - service: climate.set_preset_mode
            data:
              entity_id: climate.bibicar_hvac_climate_system
              preset_mode: defrost

    - service: switch.turn_off
      entity_id: switch.bibicar_update_switch

morning:
  mode: single
  sequence:
    - condition: state
      entity_id: group.all_people
      state: "home"
    - condition: state
      entity_id: alarm_control_panel.home_alarm
      state: "armed_home"
    - service: alarm_control_panel.alarm_disarm
      entity_id: all
    - service: climate.set_preset_mode
      data:
        entity_id: climate.main_floor
        preset_mode: home
    - service: notify.cath
      data:
        message: >-
          {%- set weekday = ['Lundi','Mardi','Mercredi','Jeudi',
                            'Vendredi','Samedi','Dimanche'] -%}
          {%- set dt = states.sensor.eve2gmmug_charge.attributes.updated_on -%}
          Bon matin Catherine!
          Ton carosse est chargé à
          {{- " " + states('sensor.eve2gmmug_charge') }}% et est
          {%- if is_state("binary_sensor.eve2gmmug_plug_status", "on") -%}
          {{ " " }}branché.
          {%- else -%}
          {{ " " }}DÉBRANCHÉ.
          {%- endif -%}
          {{ " " }}La dernière mise à jour est ce {{ weekday[dt.weekday()] -}}
          {{ " " }}à {{ as_timestamp(dt) | timestamp_custom('%HH%M') }}.
    - delay: "00:00:05"

arm_lock_home:
  sequence:
    - service: alarm_control_panel.alarm_arm_away
      entity_id: alarm_control_panel.home_alarm
    - service: lock.lock
      entity_id: lock.front_door_lock

disarm_unlock_home:
  sequence:
    - service: script.disarm_home
    - service: lock.unlock
      data:
        entity_id: lock.front_door_lock
        code: !secret front_door_pin
    - service: script.turn_on
      data:
        entity_id: script.auto_switch_on
        variables:
          duration_seconds: 300
          auto_switch_entity: switch.entrance_light

disarm_home:
  sequence:
    - condition: not
      conditions:
        - condition: state
          entity_id: alarm_control_panel.home_alarm
          state: "disarmed"
    - service: alarm_control_panel.alarm_disarm
      entity_id: alarm_control_panel.home_alarm

# Remotely called by Fitbit
next_diaper_cleaning_step:
  sequence:
    - service: input_select.select_next
      entity_id: input_select.diaper_cleaning_state
    - condition: and
      conditions:
        - "{{ 'Attente' in states('input_select.diaper_cleaning_state') }}"
        - >-
          {{ states('input_select.diaper_cleaning_state') !=
          'Attente du premier rinçage' }}
    - delay: "00:00:01"
    - service: input_select.select_next
      entity_id: input_select.diaper_cleaning_state

remote_action:
  fields:
    owner:
      description: 'The sender of the action'
      example: 'Cath'
    service:
      description: 'The service to call'
      example: 'light.turn_on'
    entity_id:
      description: 'The target of the action'
      example: 'light.kitchen_main_light'
    message:
      description: 'The content of the notification'
      example: 'turning on the kicthen light'
  mode: parallel
  sequence:
    - service: "{{ service }}"
      data:
        entity_id: "{{ entity_id }}"
    - service: notify.{{ owner }}
      data:
        message: "{{ message }}"
