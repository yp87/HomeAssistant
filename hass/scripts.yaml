auto_switch_on:
  mode: parallel
  sequence:
    - service: switch.turn_on
      data_template:
        entity_id: "{{ auto_switch_entity }}"
    - service: script.auto_switch_off
      data_template:
        auto_switch_entity: "{{ auto_switch_entity }}"
        duration_seconds: "{{ duration_seconds }}"

auto_switch_off:
  mode: parallel
  sequence:
    - delay:
        seconds: "{{ duration_seconds }}"
    - condition: template
      value_template: '{{(as_timestamp(now()) - as_timestamp(states[auto_switch_entity].last_changed) >= ((duration_seconds|int) - 1))}}'
    - service: switch.turn_off
      data_template:
        entity_id: "{{ auto_switch_entity }}"

fred_add_consumed_milk:
  sequence:
    - service: input_datetime.set_datetime
      entity_id: input_datetime.fred_last_milk
      data_template:
        time: "{{ now().strftime('%H:%M:%S') }}"
    - service: input_number.set_value
      data_template:
        entity_id: input_number.fred_daily_milk_consumption
        value: "{{ added_milk_quantity | float + states('input_number.fred_daily_milk_consumption') | float }}"
    - service: notify.all_people
      data_template:
        message: >
           Fred est rendu Ã  {{ states('input_number.fred_daily_milk_consumption') }} onces de lait.

fred_vit_d_drop:
  sequence:
    - condition: state
      entity_id: input_boolean.fred_had_drop
      state: "off"
    - service: input_boolean.turn_on
      entity_id: input_boolean.fred_had_drop
    - service: notify.all_people
      data:
        message: "Fred a pris sa goutte."

yan_pills:
  sequence:
    - condition: state
      entity_id: input_boolean.yan_had_pills
      state: "off"
    - service: input_boolean.turn_on
      entity_id: input_boolean.yan_had_pills
    - service: notify.all_people
      data:
        message: "Yan a pris ses pillules."

phone_notification:
  mode: parallel
  sequence:
    - condition: template
      value_template: '{{ is_state("person." + owner, "home") }}'
    - service_template: input_boolean.{% if type == "notification" %}toggle{% elif type == "rings" %}turn_on{% else %}turn_off{% endif %}
      data_template:
        entity_id: input_boolean.{{ owner }}_phone_{{ type or "rings"}}

white_noise_start:
  sequence:
    # This is to prevent the annoying google home startup sound.
    #-----------------------------------------------------------
    - service: media_player.volume_set
      data_template:
        entity_id: "{{ media_player_id }}"
        volume_level: 0.01
    - service: media_player.turn_off
      data_template:
        entity_id: "{{ media_player_id }}"
    - delay: 00:00:01
    - service: media_player.turn_on
      data_template:
        entity_id: "{{ media_player_id }}"
    - delay: 00:00:01
    #-----------------------------------------------------------
    - service: script.white_noise_play
      data_template:
        media_player_id: "{{ media_player_id }}"
    - delay: 00:00:02
    - service: media_player.volume_set
      data_template:
        entity_id: "{{ media_player_id }}"
        volume_level: 0.22

white_noise_play:
  sequence:
    - service: media_player.play_media
      data_template:
        media_content_type: audio/mp3
        entity_id: "{{ media_player_id }}"
        media_content_id: http://www.gstatic.com/voice_delight/sounds/long/pink_noise.mp3
    - service: script.white_noise_loop
      data_template:
        media_player_id: "{{ media_player_id }}"

white_noise_loop:
  sequence:
    - delay: 00:52:00
    - service: script.white_noise_play
      data_template:
        media_player_id: "{{ media_player_id }}"

white_noise_stop:
  sequence:
    - service: script.turn_off
      entity_id: script.white_noise_play
    - service: script.turn_off
      entity_id: script.white_noise_loop
    - service: media_player.turn_off
      data_template:
        entity_id: "{{ media_player_id }}"

lights_off_except:
  fields:
    exclude_lights:
      description: 'Excluded lights as list'
  sequence:
    - service: light.turn_off
      data_template:
        entity_id: >
          {% for device in states.light|rejectattr('entity_id','in', exclude_lights )|rejectattr('state','in','off,unavailable') %}
            {%- if not loop.first %}, {% endif -%}
            {{ device.entity_id }}
          {%- endfor %}
