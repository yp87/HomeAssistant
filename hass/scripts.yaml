---
start_the_leaf:
  description: >
    Used to start the climate on the leaf.
    Since the Leaf does not report when Climate is inactive,
    We start by turning off then on to ensure the command is sent.
  sequence:
    - service: switch.turn_off
      entity_id: switch.leaf_climate
    - delay: "00:00:05"
    - service: switch.turn_on
      entity_id: switch.leaf_climate

charge_the_leaf:
  variables:
    not_plugged_message: >-
      La Leaf ne peut pas charger car elle n'est pas branchée.
  sequence:
    - service: switch.turn_on
      entity_id: switch.leaf_battery_charging
    - condition: state
      entity_id: alarm_control_panel.home_alarm
      state: 'disarmed'
    - service: script.update_leaf_battery
    - condition: state
      entity_id: binary_sensor.leaf_battery_connected
      state: "off"
    - service: notify.all_people
      data:
        message: "{{ not_plugged_message }}"
    - service: tts.google_translate_say
      entity_id: media_player.kitchen
      data:
        message: "{{ not_plugged_message }}"
        language: 'fr'

turn_off_leaf_climate:
  sequence:
    - condition: state
      entity_id: switch.leaf_climate
      state: "on"
    # This seems to always return an error...
    - service: switch.turn_off
      entity_id: switch.leaf_climate
    - service: notify.all_people
      data:
        message: >-
          Il semble que le départ prévu de la Leaf n'a pas eu lieu.
          Il est important d'arrêter le contrôle du climat manuellement.

update_leaf_battery:
  description: >-
    Fetch the leaf's current state.
    Calling it directly with "service: script.update_leaf_battery"
    will ensure the calling script will wait for the update.
  mode: queued
  sequence:
    - repeat:
        while:
          - >
            {{ as_timestamp(now()) -
              as_timestamp(states('sensor.leaf_battery_last_updated')) > 600 }}
          - "{{ repeat.index <= 4 }}"
        sequence:
          - service: mqtt.publish
            data:
              topic: "leaf/command/battery"
              payload: "update"
          - wait_for_trigger:
              - platform: state
                entity_id: sensor.leaf_battery_last_received
            timeout: 600
    # it can take some time before the stats gets updated.
    - delay: "00:00:10"

auto_switch_on:
  mode: parallel
  sequence:
    - service: switch.turn_on
      data:
        entity_id: "{{ auto_switch_entity }}"
    - service: script.turn_on
      data:
        entity_id: script.auto_switch_off
        variables:
          auto_switch_entity: "{{ auto_switch_entity }}"
          duration_seconds: "{{ duration_seconds }}"

auto_switch_off:
  mode: parallel
  sequence:
    - delay:
        seconds: "{{ duration_seconds }}"
    - condition: template
      value_template: >-
        {{ as_timestamp(now())
           -
           as_timestamp(states[auto_switch_entity].last_changed)
           >=
           duration_seconds|int - 10 }}
    - service: switch.turn_off
      data:
        entity_id: "{{ auto_switch_entity }}"

fred_vit_d_drop:
  sequence:
    - condition: state
      entity_id: input_boolean.fred_had_drop
      state: "off"
    - service: input_boolean.turn_on
      entity_id: input_boolean.fred_had_drop
    - service: notify.all_people
      data:
        message: "Fred a pris sa goutte."

yan_pills:
  sequence:
    - condition: state
      entity_id: input_boolean.yan_had_pills
      state: "off"
    - service: input_boolean.turn_on
      entity_id: input_boolean.yan_had_pills
    - service: notify.yan
      data:
        message: "Yan a pris ses pillules."

phone_notification:
  mode: parallel
  sequence:
    - condition: template
      value_template: '{{ is_state("person." + owner, "home") }}'
    - service_template: >-
        input_boolean.
        {%- if type == "notification" -%}
          toggle
        {%- elif type == "rings" -%}
          turn_on
        {%- else -%}
          turn_off
        {%- endif -%}
      data:
        entity_id: input_boolean.{{ owner }}_phone_{{ type or "rings"}}

lights_off_except:
  fields:
    exclude_lights:
      description: 'Excluded lights as list'
  sequence:
    - service: light.turn_off
      data:
        entity_id: >-
          {% for device in
                 states.light |
                 rejectattr('entity_id','in', exclude_lights ) |
                 rejectattr('state','in','unavailable') %}
             {%- if not loop.first %}, {% endif -%}
               {{ device.entity_id }}
          {%- endfor %}

notify_and_speak:
  fields:
    message:
      description: 'The content of the text and voice notification'
      example: 'Hello everyone!'
  mode: queued
  sequence:
    - service: notify.all_people
      data:
        message: "{{ message }}"
    - service: tts.google_translate_say
      entity_id: media_player.kitchen
      data:
        message: "{{ message }}"
        language: 'fr'

set_tesla_climate:
  fields:
    state:
      description: 'The target state for the tesla climate'
      example: 'on'
  mode: restart
  sequence:
    - service: switch.turn_on
      entity_id: switch.bibicar_update_switch
    - repeat:
        count: 2
        sequence:
          - delay: "00:00:15"
          - service: "{{ 'climate.turn_'+state }}"
            entity_id: climate.bibicar_hvac_climate_system
          - condition: and
            conditions:
              - "{{ state == 'on'}}"
              - >
                {{(state_attr('weather.main_floor', 'temperature')|float) < 2}}
          - service: climate.set_preset_mode
            data:
              entity_id: climate.bibicar_hvac_climate_system
              preset_mode: defrost

    - service: switch.turn_off
      entity_id: switch.bibicar_update_switch

morning:
  mode: single
  sequence:
    - condition: state
      entity_id: group.all_people
      state: "home"
    - condition: state
      entity_id: alarm_control_panel.home_alarm
      state: "armed_home"
    - service: alarm_control_panel.alarm_disarm
      entity_id: all
    - service: climate.set_preset_mode
      data:
        entity_id: climate.main_floor
        preset_mode: home
    - service: notify.cath
      data:
        message: >-
          {%- set weekday = ['Lundi','Mardi','Mercredi','Jeudi',
                            'Vendredi','Samedi','Dimanche'] -%}
          {%- set ts =
              as_timestamp(states('sensor.leaf_battery_last_updated')) -%}
          Bon matin Catherine!
          Ton carosse est chargé à
          {{- " " + states('sensor.leaf_battery_level') }}% et est
          {%- if is_state("binary_sensor.leaf_battery_connected", "on") -%}
          {{ " " }}branché.
          {%- else -%}
          {{ " " }}DÉBRANCHÉ.
          {%- endif -%}
          {{ " " }}La dernière mise à jour est ce
          {{ " " }}{{- weekday[ts|timestamp_custom('%w')|int] -}}
          {{ " " }}à {{ ts | timestamp_custom('%HH%M') }}.
    - delay: "00:00:05"

arm_lock_home:
  sequence:
    - service: alarm_control_panel.alarm_arm_away
      entity_id: alarm_control_panel.home_alarm
    - service: lock.lock
      entity_id: lock.front_door_lock

disarm_unlock_home:
  sequence:
    - service: script.disarm_home
    - service: lock.unlock
      data:
        entity_id: lock.front_door_lock
        code: !secret front_door_pin
    - service: script.turn_on
      data:
        entity_id: script.auto_switch_on
        variables:
          duration_seconds: 300
          auto_switch_entity: switch.entrance_light

disarm_home:
  sequence:
    - condition: not
      conditions:
        - condition: state
          entity_id: alarm_control_panel.home_alarm
          state: "disarmed"
    - service: alarm_control_panel.alarm_disarm
      entity_id: alarm_control_panel.home_alarm

# Remotely called by Fitbit
next_diaper_cleaning_step:
  sequence:
    - service: input_select.select_next
      entity_id: input_select.diaper_cleaning_state
    - condition: and
      conditions:
        - "{{ 'Attente' in states('input_select.diaper_cleaning_state') }}"
        - >-
          {{ states('input_select.diaper_cleaning_state') !=
          'Attente du premier rinçage' }}
    - delay: "00:00:01"
    - service: input_select.select_next
      entity_id: input_select.diaper_cleaning_state

remote_action:
  fields:
    owner:
      description: 'The sender of the action'
      example: 'Cath'
    service:
      description: 'The service to call'
      example: 'light.turn_on'
    entity_id:
      description: 'The target of the action'
      example: 'light.kitchen_main_light'
    message:
      description: 'The content of the notification'
      example: 'turning on the kicthen light'
  mode: parallel
  sequence:
    - service: "{{ service }}"
      data:
        entity_id: "{{ entity_id }}"
    - service: notify.{{ owner }}
      data:
        message: "{{ message }}"
